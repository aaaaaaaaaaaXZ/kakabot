local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UIS = game:GetService("UserInputService")

local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera

-- Einstellungen
local Settings = {
    AimbotEnabled = true,
    AimPart = "HumanoidRootPart", -- Head, HumanoidRootPart, Nearest
    AimRadius = 150,
    AimKey = Enum.KeyCode.ButtonL2,
    MenuKey = Enum.KeyCode.ButtonSelect,
    Prediction = true,
    PredictionFactor = 0.1,
    Smoothness = 0.2, -- 0.05 bis 1
    TeamCheck = false
}

local AimbotActive = false
local MenuVisible = false
local LockedTarget = nil

-- GUI Setup
local gui = Instance.new("ScreenGui", LocalPlayer:WaitForChild("PlayerGui"))
local frame = Instance.new("Frame", gui)
frame.Size = UDim2.new(0, 300, 0, 160)
frame.Position = UDim2.new(0.5, -150, 0.3, 0)
frame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
frame.BorderSizePixel = 2
frame.Visible = false

local aimLabel = Instance.new("TextLabel", frame)
aimLabel.Size = UDim2.new(1, 0, 0.2, 0)
aimLabel.Position = UDim2.new(0, 0, 0, 0)
aimLabel.BackgroundTransparency = 1
aimLabel.TextColor3 = Color3.new(1,1,1)

local toggleLabel = Instance.new("TextLabel", frame)
toggleLabel.Size = UDim2.new(1, 0, 0.2, 0)
toggleLabel.Position = UDim2.new(0, 0, 0.2, 0)
toggleLabel.BackgroundTransparency = 1
toggleLabel.TextColor3 = Color3.new(1,1,1)

local predictionLabel = Instance.new("TextLabel", frame)
predictionLabel.Size = UDim2.new(1, 0, 0.2, 0)
predictionLabel.Position = UDim2.new(0, 0, 0.4, 0)
predictionLabel.BackgroundTransparency = 1
predictionLabel.TextColor3 = Color3.new(1,1,1)

local smoothnessLabel = Instance.new("TextLabel", frame)
smoothnessLabel.Size = UDim2.new(1, 0, 0.2, 0)
smoothnessLabel.Position = UDim2.new(0, 0, 0.6, 0)
smoothnessLabel.BackgroundTransparency = 1
smoothnessLabel.TextColor3 = Color3.new(1,1,1)

local teamCheckLabel = Instance.new("TextLabel", frame)
teamCheckLabel.Size = UDim2.new(1, 0, 0.2, 0)
teamCheckLabel.Position = UDim2.new(0, 0, 0.8, 0)
teamCheckLabel.BackgroundTransparency = 1
teamCheckLabel.TextColor3 = Color3.new(1,1,1)

local function updateMenu()
    aimLabel.Text = "Target Part: " .. Settings.AimPart
    toggleLabel.Text = "Aimbot: " .. (Settings.AimbotEnabled and "ON" or "OFF")
    predictionLabel.Text = "Prediction Factor: " .. string.format("%.2f", Settings.PredictionFactor)
    smoothnessLabel.Text = "Smoothness: " .. string.format("%.2f", Settings.Smoothness)
    teamCheckLabel.Text = "Ignore Teammates: " .. (Settings.TeamCheck and "YES" or "NO")
end

updateMenu()

-- Prediction Funktion
local function GetPredictedPosition(part)
    if not Settings.Prediction then return part.Position end
    local velocity = part.Velocity or Vector3.zero
    return part.Position + (velocity * Settings.PredictionFactor)
end

-- Nächstes Körperteil finden
local function GetNearestPart(character)
    local closestPart = nil
    local shortestDist = math.huge
    for _, part in ipairs(character:GetDescendants()) do
        if part:IsA("BasePart") then
            local screenPos, onScreen = Camera:WorldToViewportPoint(part.Position)
            if onScreen then
                local distance = (Vector2.new(screenPos.X, screenPos.Y) - UIS:GetMouseLocation()).Magnitude
                if distance < shortestDist then
                    shortestDist = distance
                    closestPart = part
                end
            end
        end
    end
    return closestPart
end

-- Team prüfen (funktioniert nur wenn TeamCheck an ist)
local function IsTeammate(player)
    if not Settings.TeamCheck then return false end
    if not LocalPlayer.Team or not player.Team then
        return false
    end
    return LocalPlayer.Team == player.Team
end

-- Gegner finden (nur lebende Spieler)
local function GetClosestTarget()
    local closest = nil
    local shortestDistance = Settings.AimRadius
    local targetPart = nil

    if LockedTarget and LockedTarget.Parent and LockedTarget.Parent:FindFirstChild("Humanoid") then
        if LockedTarget.Parent.Humanoid.Health > 0 then
            return LockedTarget
        else
            LockedTarget = nil
        end
    end

    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("Humanoid") then
            if player.Character.Humanoid.Health > 0 then
                if Settings.TeamCheck and IsTeammate(player) then
                    -- Teamkamerad ignorieren
                else
                    local part = nil

                    if Settings.AimPart == "Nearest" then
                        part = GetNearestPart(player.Character)
                    elseif player.Character:FindFirstChild(Settings.AimPart) then
                        part = player.Character[Settings.AimPart]
                    end

                    if part then
                        local screenPos, onScreen = Camera:WorldToViewportPoint(part.Position)
                        if onScreen then
                            local distance = (Vector2.new(screenPos.X, screenPos.Y) - UIS:GetMouseLocation()).Magnitude
                            if distance < shortestDistance then
                                shortestDistance = distance
                                closest = player
                                targetPart = part
                            end
                        end
                    end
                end
            end
        end
    end

    LockedTarget = targetPart
    return targetPart
end

-- Smooth Rotation helper
local function SmoothAim(currentCFrame, targetPosition, smoothness)
    local lookVector = (targetPosition - currentCFrame.Position).Unit
    local targetCFrame = CFrame.new(currentCFrame.Position, targetPosition)
    local newLookVector = currentCFrame.LookVector:Lerp(lookVector, smoothness)
    return CFrame.new(currentCFrame.Position, currentCFrame.Position + newLookVector)
end

-- Kamera bewegen
RunService.RenderStepped:Connect(function()
    if AimbotActive and Settings.AimbotEnabled then
        local targetPart = GetClosestTarget()
        if targetPart then
            local predictedPos = GetPredictedPosition(targetPart)
            local newCFrame = SmoothAim(Camera.CFrame, predictedPos, Settings.Smoothness)
            Camera.CFrame = newCFrame
        end
    end
end)

-- Input
UIS.InputBegan:Connect(function(input, gameProcessed)
    if input.KeyCode == Settings.AimKey then
        AimbotActive = true
    elseif input.KeyCode == Settings.MenuKey then
        MenuVisible = not MenuVisible
        frame.Visible = MenuVisible
        updateMenu()
    end

    if MenuVisible then
        if input.KeyCode == Enum.KeyCode.DPadUp then
            if Settings.AimPart == "HumanoidRootPart" then
                Settings.AimPart = "Head"
            elseif Settings.AimPart == "Head" then
                Settings.AimPart = "Nearest"
            else
                Settings.AimPart = "HumanoidRootPart"
            end
            updateMenu()

        elseif input.KeyCode == Enum.KeyCode.DPadDown then
            Settings.AimbotEnabled = not Settings.AimbotEnabled
            updateMenu()

        elseif input.KeyCode == Enum.KeyCode.DPadRight then
            Settings.PredictionFactor = math.clamp(Settings.PredictionFactor + 0.01, 0.01, 0.3)
            updateMenu()

        elseif input.KeyCode == Enum.KeyCode.DPadLeft then
            Settings.PredictionFactor = math.clamp(Settings.PredictionFactor - 0.01, 0.01, 0.3)
            updateMenu()

        elseif input.KeyCode == Enum.KeyCode.ButtonR1 then
            Settings.Smoothness = math.clamp(Settings.Smoothness + 0.05, 0.05, 1)
            updateMenu()

        elseif input.KeyCode == Enum.KeyCode.ButtonL1 then
            Settings.Smoothness = math.clamp(Settings.Smoothness - 0.05, 0.05, 1)
            updateMenu()

        elseif input.KeyCode == Enum.KeyCode.ButtonY then
            Settings.TeamCheck = not Settings.TeamCheck
            updateMenu()
        end
    end
end)

UIS.InputEnded:Connect(function(input, gameProcessed)
    if input.KeyCode == Settings.AimKey then
        AimbotActive = false
        LockedTarget = nil -- Reset locked target wenn AimKey losgelassen wird
    end
end)
